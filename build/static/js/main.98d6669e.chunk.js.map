{"version":3,"sources":["constants.js","reducer/playlist.js","reducer/filter.js","reducer/sort.js","reducer/index.js","reducer/pageSize.js","reducer/currentPage.js","store/index.js","middlewares/ajax.js","helpers.js","components/Header.js","ac/index.js","components/PageSize.js","components/PlaylistPage.js","components/Pagination.js","components/Playlist.js","components/Select.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_PLAYLIST","FILTER_PLAYLIST","SORT_PLAYLIST","CHANGE_PAGE_SIZE","CHANGE_PAGE","NEXT_PAGE","defaultplaylistState","loading","loaded","playlist","defaultFilters","performer","genre","year","defaultSortState","song","combineReducers","playlistState","arguments","length","undefined","action","type","response","Object","objectSpread","filter","filters","payload","defineProperty","name","value","sort","sortState","newSortState","key","column","pageSize","pageSizeState","currentPage","currentPageState","page","order","enhancer","applyMiddleware","store","next","callAJAX","rest","objectWithoutProperties","fetch","then","res","json","catch","error","createStore","reducer","getOptions","arr","set","Set","map","item","newArr","forEach","push","getFilteredPlaylist","getSortedPlaylist","sortType","sortColumn","compare","A","B","a","toLowerCase","trim","b","Header","handleClick","ev","sortPlaylist","_this","props","currentTarget","getAttribute","_this$props","this","title","react_default","createElement","Fragment","onClick","data-column","className","concat","Component","connect","PageSize","changePageSize","target","getClassName","border","data-size","PlaylistPage","renderPlaylist","slice","id","Pagination","getTotalPages","Math","ceil","getPaginationBody","from","to","total","items","i","data-value","changePage","handleChangePage","_this$props2","nextPage","data-type","Playlist","loadPlaylist","components_Header","components_PlaylistPage","components_PageSize","components_Pagination","state","Select","getOptionsForSelect","option","handleChange","filterPlaylist","onChange","defaultValue","Filter","components_Select","App","components_Playlist","components_Filter","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98d6669e.chunk.js","sourcesContent":["export const LOAD_PLAYLIST = 'LOAD_PLAYLIST'\r\nexport const FILTER_PLAYLIST = 'FILTER_PLAYLIST'\r\nexport const SORT_PLAYLIST = 'SORT_PLAYLIST'\r\nexport const CHANGE_PAGE_SIZE = 'CHANGE_PAGE_SIZE'\r\nexport const CHANGE_PAGE = 'CHANGE_PAGE'\r\nexport const NEXT_PAGE = 'NEXT_PAGE'\r\n\r\nexport const START = '_START'\r\nexport const SUCCESS = '_SUCCESS'\r\nexport const FAIL = '_FAIL'\r\n","import { LOAD_PLAYLIST, START, SUCCESS } from '../constants'\r\n\r\nconst defaultplaylistState = {\r\n  loading: false,\r\n  loaded: false,\r\n  playlist: [],\r\n}\r\n\r\nexport default (playlistState = defaultplaylistState, action) => {\r\n  const { type, response } = action\r\n  switch (type) {\r\n    //загрузка плейлиста началась\r\n    case LOAD_PLAYLIST + START:\r\n      return { ...playlistState, loading: true, loaded: false }\r\n\r\n    //плейлист загружен\r\n    case LOAD_PLAYLIST + SUCCESS:\r\n      return {\r\n        ...playlistState,\r\n        playlist: response,\r\n        loading: false,\r\n        loaded: true,\r\n      }\r\n\r\n    default:\r\n      return playlistState\r\n  }\r\n}\r\n","import { FILTER_PLAYLIST } from '../constants'\r\n\r\nconst defaultFilters = {\r\n  performer: '',\r\n  genre: '',\r\n  year: '',\r\n}\r\n\r\nexport default (filters = defaultFilters, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    //новые значения фильтров\r\n    case FILTER_PLAYLIST:\r\n      return { ...filters, [payload.name]: payload.value }\r\n\r\n    default:\r\n      return filters\r\n  }\r\n}\r\n","import { SORT_PLAYLIST } from '../constants'\r\n\r\nconst defaultSortState = {\r\n  performer: 'sort',\r\n  song: 'sort',\r\n  genre: 'sort',\r\n  year: 'sort',\r\n}\r\nexport default (sortState = defaultSortState, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    //установка значений сортировки\r\n    //sort - не сортируем\r\n    //sort-up - сортируем по возростанию\r\n    //sort-down - сортируем по убыванию\r\n    case SORT_PLAYLIST:\r\n      const newSortState = sortState\r\n      for (let key in newSortState) {\r\n        if (newSortState[key] === newSortState[payload.column]) {\r\n          continue\r\n        } else {\r\n          newSortState[key] = 'sort'\r\n        }\r\n      }\r\n\r\n      //смена значений при первом и повторных кликах\r\n      if (newSortState[payload.column] === 'sort')\r\n        newSortState[payload.column] = 'sort-up'\r\n      else if (newSortState[payload.column] === 'sort-up')\r\n        newSortState[payload.column] = 'sort-down'\r\n      else if (newSortState[payload.column] === 'sort-down')\r\n        newSortState[payload.column] = 'sort-up'\r\n\r\n      return { ...newSortState }\r\n\r\n    default:\r\n      return sortState\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport playlist from './playlist'\r\nimport filter from './filter'\r\nimport sort from './sort'\r\nimport pageSize from './pageSize'\r\nimport currentPage from './currentPage'\r\n\r\nexport default combineReducers({\r\n  playlist,\r\n  filter,\r\n  sort,\r\n  pageSize,\r\n  currentPage,\r\n})\r\n","import { CHANGE_PAGE_SIZE } from '../constants'\r\n\r\nconst defaultpageSize = '5'\r\n\r\nexport default (pageSizeState = defaultpageSize, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    //изменение размера страницы плейлиста\r\n    case CHANGE_PAGE_SIZE:\r\n      if (pageSizeState === payload.pageSize) return pageSizeState\r\n      return payload.pageSize\r\n\r\n    default:\r\n      return pageSizeState\r\n  }\r\n}\r\n","import {\r\n  CHANGE_PAGE,\r\n  CHANGE_PAGE_SIZE,\r\n  FILTER_PLAYLIST,\r\n  NEXT_PAGE,\r\n} from '../constants'\r\n\r\nconst defaultCurrentPage = '1'\r\n\r\nexport default (currentPageState = defaultCurrentPage, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    //изменение текущей страницы\r\n    case CHANGE_PAGE:\r\n      if (currentPageState === payload.page) return currentPageState\r\n      return payload.page\r\n\r\n    //переход на следующую страницу вперед/назад\r\n    case NEXT_PAGE:\r\n      if (payload.order === 'back') return --currentPageState\r\n      if (payload.order === 'forward') return ++currentPageState\r\n      break\r\n\r\n    //при изменении размера страницы или значения фильтров переходим на начальную страницу\r\n    case CHANGE_PAGE_SIZE:\r\n    case FILTER_PLAYLIST:\r\n      return defaultCurrentPage\r\n\r\n    default:\r\n      return currentPageState\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport reducer from '../reducer'\r\nimport ajax from '../middlewares/ajax'\r\n\r\nconst enhancer = applyMiddleware(ajax)\r\nconst store = createStore(reducer, {}, enhancer)\r\n\r\nexport default store\r\n","import { START, SUCCESS, FAIL } from '../constants'\r\n\r\n//запрос к предполагаемому серверу\r\nexport default store => next => action => {\r\n  const { callAJAX, type, ...rest } = action\r\n  if (!callAJAX) return next(action)\r\n\r\n  next({\r\n    ...rest,\r\n    type: type + START,\r\n  })\r\n\r\n  fetch(callAJAX)\r\n    .then(res => res.json())\r\n    .then(response => next({ ...rest, type: type + SUCCESS, response }))\r\n    .catch(error => next({ ...rest, type: type + FAIL, error }))\r\n}\r\n","//возвращаем массив уникальных значений ключей, на входе массив из объектов\r\nexport function getOptions(arr, key) {\r\n  const set = new Set(arr.map(item => item[key]))\r\n  const newArr = []\r\n  set.forEach(value => newArr.push(value))\r\n  return newArr\r\n}\r\n\r\n//возвращаем отфильтрованный массив, на входе массив из объектов и значения фильтров\r\nexport function getFilteredPlaylist(playlist, filter) {\r\n  const { performer, genre, year } = filter\r\n  return playlist.filter(\r\n    item =>\r\n      /*eslint-disable*/\r\n      (!performer || item.performer == performer) &&\r\n      (!genre || item.genre == genre) &&\r\n      (!year || item.year == year)\r\n  )\r\n}\r\n\r\n//возвращаем отсортированный массив, на входе массив из объектов и объект со значениями для сортировки\r\nexport function getSortedPlaylist(playlist, sort) {\r\n  let sortType, sortColumn, compare\r\n  //выбираем ключи (колонка и направление сортировки)\r\n  for (let key in sort) {\r\n    if (sort[key] !== 'sort') {\r\n      sortType = sort[key]\r\n      sortColumn = key\r\n    }\r\n  }\r\n  //нечего сортировать\r\n  if (!sortColumn) return playlist\r\n  //функция сортировки\r\n  compare = (A, B) => {\r\n    switch (sortColumn) {\r\n      //строковые значения\r\n      case 'performer':\r\n      case 'song':\r\n      case 'genre':\r\n        const a = A[sortColumn].toLowerCase().trim()\r\n        const b = B[sortColumn].toLowerCase().trim()\r\n        switch (sortType) {\r\n          //по возростанию\r\n          case 'sort-up':\r\n            if (a < b) return -1\r\n            if (a > b) return 1\r\n          //по убыванию\r\n          case 'sort-down':\r\n            if (a > b) return -1\r\n            if (a < b) return 1\r\n        }\r\n        break\r\n      //числовые значения\r\n      case 'year':\r\n        switch (sortType) {\r\n          //по возростанию\r\n          case 'sort-up':\r\n            return A.year - B.year\r\n          //по убыванию\r\n          case 'sort-down':\r\n            return B.year - A.year\r\n        }\r\n    }\r\n  }\r\n  return playlist.sort(compare)\r\n}\r\n","import React, { Component } from 'react'\r\nimport { sortPlaylist } from '../ac'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Header extends Component {\r\n  static propTypes = {\r\n    // from connect\r\n    sortPlaylist: PropTypes.func.isRequired,\r\n    //from Playlist\r\n    title: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    order: PropTypes.string.isRequired,\r\n  }\r\n\r\n  handleClick = ev => {\r\n    const { sortPlaylist } = this.props\r\n    //передаем в редьюсор имя колонки для сортировки\r\n    sortPlaylist(ev.currentTarget.getAttribute('data-column'))\r\n  }\r\n\r\n  render() {\r\n    const { title, name, order } = this.props\r\n    return (\r\n      <React.Fragment>\r\n        <td\r\n          onClick={this.handleClick}\r\n          data-column={name}\r\n          className=\"playlist_table_header\"\r\n        >\r\n          <span>{title}</span>\r\n          {!order ? null : <i className={`sort_icon fas fa-${order}`} />}\r\n        </td>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { sortPlaylist }\r\n)(Header)\r\n","import {\r\n  LOAD_PLAYLIST,\r\n  FILTER_PLAYLIST,\r\n  SORT_PLAYLIST,\r\n  CHANGE_PAGE_SIZE,\r\n  CHANGE_PAGE,\r\n  NEXT_PAGE,\r\n} from '../constants'\r\n\r\n//загрузка плейлиста\r\nexport function loadPlaylist() {\r\n  return {\r\n    type: LOAD_PLAYLIST,\r\n    callAJAX: '../../serverData.json',\r\n  }\r\n}\r\n\r\n//фильтрация плейлиста\r\nexport function filterPlaylist(name, value) {\r\n  return {\r\n    type: FILTER_PLAYLIST,\r\n    payload: { name, value },\r\n  }\r\n}\r\n\r\n//сортировка плейлиста\r\nexport function sortPlaylist(column) {\r\n  return {\r\n    type: SORT_PLAYLIST,\r\n    payload: { column },\r\n  }\r\n}\r\n\r\n//изменение размера отображения плейлиста 5/10/25/50/100\r\nexport function changePageSize(pageSize) {\r\n  return {\r\n    type: CHANGE_PAGE_SIZE,\r\n    payload: { pageSize },\r\n  }\r\n}\r\n\r\n//изменение страницы плейлиста\r\nexport function changePage(page) {\r\n  return {\r\n    type: CHANGE_PAGE,\r\n    payload: { page },\r\n  }\r\n}\r\n\r\n//изменение страницы плейлиста вперед/назад\r\nexport function nextPage(order) {\r\n  return {\r\n    type: NEXT_PAGE,\r\n    payload: { order },\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { changePageSize } from '../ac'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PageSize extends Component {\r\n  static propTypes = {\r\n    // from connect\r\n    changePageSize: PropTypes.func.isRequired,\r\n    // from Playlist\r\n    pageSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  }\r\n\r\n  handleClick = ev => {\r\n    const { changePageSize } = this.props\r\n    //передаем в редьюсор значение размера страницы: 5/10/25/50/100\r\n    changePageSize(ev.target.getAttribute('data-size'))\r\n  }\r\n\r\n  getClassName = value => {\r\n    const { pageSize } = this.props\r\n    //подсвечиваем выбранное значение\r\n    return pageSize === value ? 'pagesize_current' : null\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table className=\"pagesize\" border=\"1\">\r\n        <tbody>\r\n          <tr onClick={this.handleClick}>\r\n            <td key={1} data-size={5} className={this.getClassName('5')}>\r\n              {'5'}\r\n            </td>\r\n            <td key={2} data-size={10} className={this.getClassName('10')}>\r\n              {'10'}\r\n            </td>\r\n            <td key={3} data-size={25} className={this.getClassName('25')}>\r\n              {'25'}\r\n            </td>\r\n            <td key={4} data-size={50} className={this.getClassName('50')}>\r\n              {'50'}\r\n            </td>\r\n            <td key={5} data-size={100} className={this.getClassName('100')}>\r\n              {'100'}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { changePageSize }\r\n)(PageSize)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlaylistPage extends Component {\r\n  static propTypes = {\r\n    //from Playlist\r\n    playlist: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n          .isRequired,\r\n        performer: PropTypes.string.isRequired,\r\n        song: PropTypes.string.isRequired,\r\n        genre: PropTypes.string.isRequired,\r\n        year: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      })\r\n    ),\r\n\r\n    pageSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    currentPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  }\r\n\r\n  render() {\r\n    const { playlist, pageSize, currentPage } = this.props\r\n    if (!playlist.length) return null\r\n    //из массива плейлиста берем елементы для текущей страницы\r\n    const renderPlaylist = playlist.slice(\r\n      (currentPage - 1) * pageSize,\r\n      currentPage * pageSize\r\n    )\r\n\r\n    return (\r\n      <tbody>\r\n        {renderPlaylist.map(item => (\r\n          <tr key={item.id}>\r\n            <td key={1}>{item.performer}</td>\r\n            <td key={2}>{item.song}</td>\r\n            <td key={3}>{item.genre}</td>\r\n            <td key={4}>{item.year}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlaylistPage\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changePage, nextPage } from '../ac'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Pagination extends Component {\r\n  static propTypes = {\r\n    // from connect\r\n    changePage: PropTypes.func.isRequired,\r\n    nextPage: PropTypes.func.isRequired,\r\n    // from Playlist\r\n    length: PropTypes.number,\r\n    pageSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    currentPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  }\r\n\r\n  getTotalPages = () => {\r\n    const { length, pageSize } = this.props\r\n    //расчет количества страниц\r\n    return length ? Math.ceil(length / pageSize) : 0\r\n  }\r\n\r\n  getPaginationBody = () => {\r\n    const { currentPage } = this.props\r\n    const total = this.getTotalPages()\r\n    // описываем поведение пагинатора, подсвечиваем текущее значение\r\n    if (total === 0) return <li>{0}</li>\r\n\r\n    let from, to\r\n    if (currentPage < 4 && total < 6) {\r\n      from = 1\r\n      to = total\r\n    }\r\n    if (currentPage < 4 && total >= 6) {\r\n      from = 1\r\n      to = 5\r\n    }\r\n    if (+currentPage >= 4 && +currentPage <= total - 2) {\r\n      from = +currentPage - 2\r\n      to = +currentPage + 2\r\n    }\r\n    if (+currentPage >= 4 && +currentPage > total - 2) {\r\n      from = total - 4\r\n      to = total\r\n    }\r\n\r\n    const items = []\r\n    for (let i = from; i <= to; i++) {\r\n      items.push(\r\n        <li\r\n          key={i}\r\n          data-value={i}\r\n          onClick={this.handleClick}\r\n          className={i === +currentPage ? 'pagination_current' : null}\r\n        >\r\n          <span>{i}</span>\r\n        </li>\r\n      )\r\n    }\r\n    return <React.Fragment>{items}</React.Fragment>\r\n  }\r\n\r\n  handleClick = ev => {\r\n    const { changePage } = this.props\r\n    //передаем в редьюсор выбранную страницу\r\n    changePage(ev.currentTarget.getAttribute('data-value'))\r\n  }\r\n\r\n  handleChangePage = ev => {\r\n    const { nextPage, currentPage } = this.props\r\n    const total = this.getTotalPages()\r\n    // передаем в редьюсор клик вперед/назад, игнорируем крайние значения\r\n    const type = ev.currentTarget.getAttribute('data-type')\r\n    if (\r\n      (type === 'back' && currentPage > 1) ||\r\n      (type === 'forward' && currentPage < total)\r\n    )\r\n      nextPage(type)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"pagination\">\r\n        <li onClick={this.handleChangePage} data-type={'back'}>\r\n          <i className=\"pagination_icon fas fa-angle-left\" />\r\n        </li>\r\n        {this.getPaginationBody()}\r\n        <li onClick={this.handleChangePage} data-type={'forward'}>\r\n          <i className=\"pagination_icon fas fa-angle-right\" />\r\n        </li>\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { changePage, nextPage }\r\n)(Pagination)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { loadPlaylist } from '../ac'\r\nimport { getFilteredPlaylist, getSortedPlaylist } from '../helpers'\r\nimport Header from './Header'\r\nimport PageSize from './PageSize'\r\nimport PlaylistPage from './PlaylistPage'\r\nimport Pagination from './Pagination'\r\n\r\nclass Playlist extends Component {\r\n  static propTypes = {\r\n    // from connect\r\n    loading: PropTypes.bool.isRequired,\r\n    loaded: PropTypes.bool.isRequired,\r\n\r\n    playlist: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n          .isRequired,\r\n        performer: PropTypes.string.isRequired,\r\n        song: PropTypes.string.isRequired,\r\n        genre: PropTypes.string.isRequired,\r\n        year: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      })\r\n    ),\r\n\r\n    filter: PropTypes.shape({\r\n      performer: PropTypes.string.isRequired,\r\n      genre: PropTypes.string.isRequired,\r\n      year: PropTypes.string.isRequired,\r\n    }),\r\n\r\n    sort: PropTypes.shape({\r\n      performer: PropTypes.string.isRequired,\r\n      song: PropTypes.string.isRequired,\r\n      genre: PropTypes.string.isRequired,\r\n      year: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n\r\n    pageSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    currentPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    loadPlaylist: PropTypes.func.isRequired,\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { loaded, loading, loadPlaylist } = this.props\r\n    //загружаем плейлист\r\n    if (!loaded && !loading) loadPlaylist()\r\n  }\r\n\r\n  render() {\r\n    const { sort, playlist, pageSize, currentPage } = this.props\r\n    return (\r\n      <div>\r\n        <h3>Плейлист</h3>\r\n        <table className=\"playlist_table\">\r\n          <thead className=\"playlist_table_thead\">\r\n            <tr>\r\n              <Header\r\n                title={'Исполнитель'}\r\n                name={'performer'}\r\n                order={sort.performer}\r\n              />\r\n              <Header title={'Песня'} name={'song'} order={sort.song} />\r\n              <Header title={'Жанр'} name={'genre'} order={sort.genre} />\r\n              <Header title={'Год'} name={'year'} order={sort.year} />\r\n            </tr>\r\n          </thead>\r\n          <PlaylistPage\r\n            playlist={playlist}\r\n            pageSize={pageSize}\r\n            currentPage={currentPage}\r\n          />\r\n        </table>\r\n        <PageSize pageSize={pageSize} />\r\n        <Pagination\r\n          length={playlist.length}\r\n          pageSize={pageSize}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => {\r\n    return {\r\n      loading: state.playlist.loading,\r\n      loaded: state.playlist.loaded,\r\n      //getSortedPlaylist() и getFilteredPlaylist() - из helpers.js\r\n      playlist: getSortedPlaylist(\r\n        getFilteredPlaylist(state.playlist.playlist, state.filter),\r\n        state.sort\r\n      ),\r\n      sort: state.sort,\r\n      pageSize: state.pageSize,\r\n      currentPage: state.currentPage,\r\n    }\r\n  },\r\n  { loadPlaylist }\r\n)(Playlist)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { filterPlaylist } from '../ac'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Select extends Component {\r\n  static propTypes = {\r\n    // from connect\r\n    filterPlaylist: PropTypes.func.isRequired,\r\n    // from Filter\r\n    option: PropTypes.array,\r\n    name: PropTypes.string,\r\n  }\r\n\r\n  getOptionsForSelect = () => {\r\n    const { option } = this.props\r\n    if (!option.length) return null\r\n    return option.map(item => (\r\n      <option value={item} key={item}>\r\n        {item}\r\n      </option>\r\n    ))\r\n  }\r\n\r\n  handleChange = () => ev => {\r\n    const { filterPlaylist } = this.props\r\n    //передаем в редьюсор значение фильтра\r\n    filterPlaylist(ev.target.name, ev.target.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <select name={this.props.name} onChange={this.handleChange()}>\r\n          <option value={''} defaultValue>\r\n            {'Все'}\r\n          </option>\r\n          {this.getOptionsForSelect()}\r\n        </select>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { filterPlaylist }\r\n)(Select)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport Select from './Select'\r\nimport { getOptions, getFilteredPlaylist } from '../helpers'\r\n\r\nclass Filter extends Component {\r\n  static propTypes = {\r\n    // from connect\r\n    playlist: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n          .isRequired,\r\n        performer: PropTypes.string.isRequired,\r\n        song: PropTypes.string.isRequired,\r\n        genre: PropTypes.string.isRequired,\r\n        year: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      })\r\n    ),\r\n  }\r\n\r\n  render() {\r\n    const { playlist } = this.props\r\n    //оставляем уникальные значения для полей фильтра\r\n    //getOptions() - из helpers.js\r\n    const performer = getOptions(playlist, 'performer')\r\n    const genre = getOptions(playlist, 'genre')\r\n    const year = getOptions(playlist, 'year')\r\n\r\n    return (\r\n      <div className=\"filter\">\r\n        <h3>Фильтр</h3>\r\n        <div className=\"filter_body\">\r\n          <p>Исполнитель</p>\r\n          <Select option={performer} name={'performer'} />\r\n          <p>Жанр</p>\r\n          <Select option={genre} name={'genre'} />\r\n          <p>Год</p>\r\n          <Select option={year} name={'year'} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(state => {\r\n  return {\r\n    //забираем из стора отфильтрованный ранее плейлист, чтобы убрать лишние значения\r\n    //getFilteredPlaylist() - из helpers.js\r\n    playlist: getFilteredPlaylist(state.playlist.playlist, state.filter),\r\n  }\r\n})(Filter)\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Playlist from './components/Playlist'\nimport Filter from './components/Filter'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"inline_block\">\n        <Playlist />\n        <Filter />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}